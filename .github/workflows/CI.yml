name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.8'
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}



      - name: Install Neper on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y git cmake build-essential gsl-bin libgsl-dev libomp-dev
          git clone https://github.com/neperfepx/neper.git
          cd neper/src
          mkdir build
          cd build
          cmake -DOpenMP_C_FLAGS="-fopenmp" -DOpenMP_C_LIB_NAMES="omp" ..
          make
          sudo make install

      - name: Install Neper on macOS
        if: matrix.os == 'macOS-latest'
        run: |
          brew update
          brew install git cmake gsl libomp  llvm

          OPTION (USE_OpenMP "Use OpenMP to enable <omp.h>" ON)

          set(CMAKE_C_COMPILER "/usr/local/Cellar/llvm/5.0.1/bin/clang")
          set(CMAKE_CXX_COMPILER "/usr/local/Cellar/llvm/5.0.1/bin/clang++")
          set(OPENMP_LIBRARIES "/usr/local/Cellar/llvm/5.0.1/lib")
          set(OPENMP_INCLUDES "/usr/local/Cellar/llvm/5.0.1/include")

         
          if(APPLE AND USE_OpenMP)
              if(CMAKE_C_COMPILER_ID MATCHES "Clang")
                  set(OpenMP_C "${CMAKE_C_COMPILER}")
                  set(OpenMP_C_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
                  set(OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5")
                  set(OpenMP_libomp_LIBRARY ${OpenMP_C_LIB_NAMES})
                  set(OpenMP_libgomp_LIBRARY ${OpenMP_C_LIB_NAMES})
                  set(OpenMP_libiomp5_LIBRARY ${OpenMP_C_LIB_NAMES})
              endif()
              if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
                set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
                set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
                set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
                set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
                set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
                set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
              endif()
          endif()

          if(USE_OpenMP)
            find_package(OpenMP REQUIRED)
          endif(USE_OpenMP)

          if (OPENMP_FOUND)
              include_directories("${OPENMP_INCLUDES}")
              link_directories("${OPENMP_LIBRARIES}")
              set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
              set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
              # set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
          endif(OPENMP_FOUND)
          
          
          git clone https://github.com/neperfepx/neper.git
          cd neper/src
          
          mkdir build
          cd build
          cmake ..

          
          make
          sudo make install


      - name: Install Neper on Windows
        if: matrix.os == 'windows-latest'
        run: |
          sudo apt-get update
          sudo apt install build-essential
          sudo apt install gfortran

          
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using NeperStructureGenerator
          DocMeta.setdocmeta!(NeperStructureGenerator, :DocTestSetup, :(using NeperStructureGenerator); recursive=true)
          doctest(NeperStructureGenerator)